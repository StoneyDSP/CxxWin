cmake_minimum_required (VERSION 3.14...3.27 FATAL_ERROR)

list (APPEND CMAKE_MODULE_PATH
	"${CMAKE_CURRENT_LIST_DIR}/share/cmake/Modules"
)

project (CxxWin)
enable_language (ASM)
# enable_language (OBJC)
# enable_language (OBJCXX)
# enable_language (Fortran)
# enable_language (C)
enable_language (CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)

include(GNUInstallDirs)

set (PROJECT_VERSION_MAJOR 1)
set (PROJECT_VERSION_MINOR 0)
set (PROJECT_VERSION_PATCH 1)

include (GetSourceInfo)
get_source_info ()
set (PROJECT_VERSION_TWEAK "${git_revision}")
# set(PROJECT_VERSION_TWEAK "x")

set (PROJECT_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}-${PROJECT_VERSION_TWEAK}" CACHE STRING "Value given to the ``VERSION`` option of the most recent call to the ``project()`` command, if any." FORCE)
set (PROJECT_DESCRIPTION "A quick one-and-done Win32 API project implementing a COM blank application window for Windows platforms in C++." CACHE STRING "Short project description given to the project command." FORCE)
set (PROJECT_HOMEPAGE_URL "https://github.com/StoneyDSP/CxxWin.git" CACHE STRING "The homepage URL of the project." FORCE)

option (OPTION_SHARED_LIBS "Global flag to cause ``add_library()`` to create shared libraries if on." ON)

if (OPTION_SHARED_LIBS)
	set (BUILD_SHARED_LIBS ON CACHE BOOL "Global flag to cause ``add_library()`` to create shared libraries if on." FORCE)
else ()
	set (BUILD_SHARED_LIBS OFF CACHE BOOL "Global flag to cause ``add_library()`` to create shared libraries if on." FORCE)
endif ()

#set(CMAKE_CXX_FLAGS "-DUNICODE -D_UNICODE -std=c++17 -ld2d1 -lcomctl32 -Wl,--subsystem,windows" CACHE STRING "" FORCE)

set (CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/bin" CACHE PATH "Where to put all the :`RUNTIME <Runtime Output Artifacts>` target files when built.")
set (CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib" CACHE PATH "Where to put all the :`LIBRARY <Library Output Artifacts>` target files when built.")
set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib" CACHE PATH "Where to put all the :`ARCHIVE <Archive Output Artifacts>` target files when built.")
set (CMAKE_PDB_OUTPUT_DIRECTORY     "${CMAKE_CURRENT_BINARY_DIR}/bin" CACHE PATH "Output directory for MS debug symbol ``.pdb`` files generated by the linker for executable and shared library targets.")

#[===[.md
Win32::Core
]===]
file(COPY
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_core/win32_core.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_core/win32_core.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_core/win32_core.mm"
    DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core"
)

#[===[.md
Win32::Core::Memory
]===]
file(COPY
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_core/memory/win32_SmartPointer.hpp"
    DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core/memory"
)

#[===[.md
Win32::Core::Native
]===]
file(COPY
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_core/native/win32_BasicNativeHeaders.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_core/native/win32_Unicode.hpp"
    DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core/native"
)

#[===[.md
Win32::Core::System
]===]
file(COPY
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_core/system/win32_CompilerSupport.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_core/system/win32_PlatformDefs.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_core/system/win32_StandardHeader.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_core/system/win32_TargetPlatform.hpp"
    DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core/system"
)

#[===[.md
Win32::Core::Window
]===]
file(COPY
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_core/window/win32_BaseWindow.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_core/window/win32_DPIScale.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_core/window/win32_MainWindow.hpp"
    DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core/window"
)

#[===[.md
Win32::Resource
]===]
file(COPY
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_resource/win32_resource.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_resource/win32_resource.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_resource/win32_resource.mm"
    DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_resource"
)

#[===[.md
CMakeRC::
]===]
file(COPY
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_resource/cmrc.hpp"
    DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_resource"
)

#[===[.md
Win32::Resource::Img
]===]
file(COPY
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_resource/img/win32_png.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_resource/img/win32_ApplicationIcon_png.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_resource/img/win32_Logo_png.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_resource/img/win32_SmallLogo_png.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_resource/img/win32_SmallLogo44x44_png.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_resource/img/win32_SplashScreen_png.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_resource/img/win32_StoreLogo_png.hpp"
    DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_resource/img"
)

#[===[.md
Win32::Resource::Key
]===]
file(COPY
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_resource/key/win32_pfx.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/modules/Win32_resource/key/win32_Windows_TemporaryKey_pfx.hpp"
    DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_resource/key"
)

add_compile_definitions (
    UNICODE
    _UNICODE
)
add_compile_options (
    -municode
    -mwindows
    -Wl,--subsystem,windows
    -std=c++17
)
add_link_options (
    -municode
    -mwindows
)

add_library (library)
add_library (${PROJECT_NAME}::library ALIAS library)

target_include_directories (library

    PRIVATE

        $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>
        $<INSTALL_INTERFACE:include>
)

target_sources (library

    PUBLIC

        FILE_SET library_HEADERS
        TYPE HEADERS

        BASE_DIRS
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}>
            $<INSTALL_INTERFACE:include/${PROJECT_NAME}>
        FILES
            # include/${PROJECT_NAME}/modules/Win32_core/win32_core.h
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core/win32_core.hpp>
            $<INSTALL_INTERFACE:include/${PROJECT_NAME}/modules/Win32_core/win32_core.hpp>

            # include/${PROJECT_NAME}/modules/Win32_core/memory/win32_SmartPointer.h
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core/memory/win32_SmartPointer.hpp>
            $<INSTALL_INTERFACE:include/${PROJECT_NAME}/modules/Win32_core/memory/win32_SmartPointer.hpp>

            # include/${PROJECT_NAME}/modules/Win32_core/native/win32_BasicNativeHeaders.h
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core/native/win32_BasicNativeHeaders.hpp>
            $<INSTALL_INTERFACE:include/${PROJECT_NAME}/modules/Win32_core/native/win32_BasicNativeHeaders.hpp>

            # include/${PROJECT_NAME}/modules/Win32_core/native/win32_Unicode.h
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core/native/win32_Unicode.hpp>
            $<INSTALL_INTERFACE:include/${PROJECT_NAME}/modules/Win32_core/native/win32_Unicode.hpp>

            # include/${PROJECT_NAME}/modules/Win32_core/system/win32_CompilerSupport.h"
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core/system/win32_CompilerSupport.hpp>
            $<INSTALL_INTERFACE:include/${PROJECT_NAME}/modules/Win32_core/system/win32_CompilerSupport.hpp>

            # include/${PROJECT_NAME}/modules/Win32_core/system/win32_PlatformDefs.h"
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core/system/win32_PlatformDefs.hpp>
            $<INSTALL_INTERFACE:include/${PROJECT_NAME}/modules/Win32_core/system/win32_PlatformDefs.hpp>

            # include/${PROJECT_NAME}/modules/Win32_core/system/win32_StandardHeader.h"
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core/system/win32_StandardHeader.hpp>
            $<INSTALL_INTERFACE:include/${PROJECT_NAME}/modules/Win32_core/system/win32_StandardHeader.hpp>

            # include/${PROJECT_NAME}/modules/Win32_core/system/win32_TargetPlatform.h"
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core/system/win32_TargetPlatform.hpp>
            $<INSTALL_INTERFACE:include/${PROJECT_NAME}/modules/Win32_core/system/win32_TargetPlatform.hpp>

            # include/${PROJECT_NAME}/modules/Win32_core/window/win32_BaseWindow.h
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core/window/win32_BaseWindow.hpp>
            $<INSTALL_INTERFACE:include/${PROJECT_NAME}/modules/Win32_core/window/win32_BaseWindow.hpp>

            # include/${PROJECT_NAME}/modules/Win32_core/window/win32_DPIScale.h
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core/window/win32_DPIScale.hpp>
            $<INSTALL_INTERFACE:include/${PROJECT_NAME}/modules/Win32_core/window/win32_DPIScale.hpp>

            # include/${PROJECT_NAME}/modules/Win32_core/window/win32_MainWindow.h
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/modules/Win32_core/window/win32_MainWindow.hpp>
            $<INSTALL_INTERFACE:include/${PROJECT_NAME}/modules/Win32_core/window/win32_MainWindow.hpp>
)

target_sources (library

    PRIVATE
        # "include/${PROJECT_NAME}/modules/Win32_core/win32_core.mm"
        "include/${PROJECT_NAME}/modules/Win32_core/win32_core.cpp"
)

set_target_properties (library

    PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY bin
        LIBRARY_OUTPUT_DIRECTORY lib
        ARCHIVE_OUTPUT_DIRECTORY lib
        PDB_OUTPUT_DIRECTORY     bin
)

target_compile_definitions (library

	PUBLIC
        UNICODE
        _UNICODE
)

target_compile_features (library
    PUBLIC
        cxx_std_17
)

target_compile_options (library

	PUBLIC
        -municode
        -mwindows
        -Wl,--subsystem,windows
)

target_link_libraries (library

    PUBLIC
        d2d1
        comctl32
)

target_link_options (library

    PUBLIC
        -municode
        -mwindows
)

file(COPY
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/WinMain.hpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/MainComponent.hpp"
    DESTINATION
    "${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}"
)

file(COPY
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/WinMain.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/MainComponent.cpp"
    DESTINATION
    "${CMAKE_CURRENT_BINARY_DIR}/src/${PROJECT_NAME}"
)

add_executable (executable)
add_executable (${PROJECT_NAME}::executable ALIAS executable)

target_include_directories (executable

    PRIVATE

        $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>
        $<INSTALL_INTERFACE:include>
)

target_sources (executable

    PUBLIC

        FILE_SET executable_HEADERS
        TYPE HEADERS

        BASE_DIRS
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}>
            $<INSTALL_INTERFACE:include/${PROJECT_NAME}>
        FILES
            # include/${PROJECT_NAME}/MainComponent.h
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/MainComponent.hpp>
            $<INSTALL_INTERFACE:include/${PROJECT_NAME}/MainComponent.hpp>

            # include/${PROJECT_NAME}/WinMain.h
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/${PROJECT_NAME}/WinMain.hpp>
            $<INSTALL_INTERFACE:include/${PROJECT_NAME}/WinMain.hpp>
)

target_sources (executable

    PRIVATE
        "${CMAKE_CURRENT_BINARY_DIR}/src/${PROJECT_NAME}/MainComponent.cpp"
        "${CMAKE_CURRENT_BINARY_DIR}/src/${PROJECT_NAME}/WinMain.cpp"
)

set_target_properties (executable

    PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY bin
        LIBRARY_OUTPUT_DIRECTORY lib
        ARCHIVE_OUTPUT_DIRECTORY lib
        PDB_OUTPUT_DIRECTORY     bin
        # RUNTIME_OUTPUT_NAME "${CMAKE_EXECUTABLE_PREFIX}${PROJECT_NAME}${CMAKE_EXECUTABLE_SUFFIX}"
        # RUNTIME_OUTPUT_NAME_DEBUG "${CMAKE_EXECUTABLE_PREFIX}${CMAKE_DEBUG_PREFIX}${PROJECT_NAME}${CMAKE_DEBUG_POSTFIX}${CMAKE_EXECUTABLE_SUFFIX}"
)

target_compile_definitions (executable

	PUBLIC
        UNICODE
        _UNICODE
)

target_compile_features (executable
    PUBLIC
        cxx_std_17
)

target_compile_options (executable

	PUBLIC
        -municode
        -mwindows
        -Wl,--subsystem,windows
)

target_link_libraries (executable

    PUBLIC
        ${PROJECT_NAME}::library
        d2d1
        comctl32
)

target_link_options (executable

    PUBLIC
        -municode
        -mwindows
)

# Create targets to export
install(
	TARGETS library executable
	EXPORT CxxWinTargets
	LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
	ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
	RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
	INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
    FILE_SET library_HEADERS
    FILE_SET executable_HEADERS
)

install (
	EXPORT CxxWinTargets
	FILE CxxWinTargets.cmake
	NAMESPACE ${PROJECT_NAME}::
	DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
)

# Export targets to binary dir
export(
	EXPORT CxxWinTargets
	FILE "${CMAKE_CURRENT_BINARY_DIR}/CxxWinTargets.cmake"
	NAMESPACE ${PROJECT_NAME}::
)

# ##-- Create CMake package config
include (CMakePackageConfigHelpers)

configure_package_config_file (
	"${CMAKE_CURRENT_SOURCE_DIR}/share/CxxWinConfig.cmake.in"
	"${CMAKE_CURRENT_BINARY_DIR}/CxxWinConfig.cmake"
	INSTALL_DESTINATION
    "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
)

install (
	FILES
	    "${CMAKE_CURRENT_BINARY_DIR}/CxxWinConfig.cmake"
	DESTINATION
	    "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
)



#[===[.md

---------------
 CPACK
---------------

# include(JoinPaths)
# join_paths(libdir_for_pc_file "\${exec_prefix}" "${CMAKE_INSTALL_LIBDIR}")
# join_paths(includedir_for_pc_file "\${prefix}" "${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}")

# # message(STATUS "Creating pkgconfig file...")
# configure_file(
#     ${PROJECT_SOURCE_DIR}/support/cmake/cmodule.pc.in
#     ${PROJECT_BINARY_DIR}/lib/pkgconfig/${PROJECT_NAME_LOWER}.pc
#     @ONLY
# )
# # message(STATUS "Created pkgconfig file at ${${PROJECT_NAME_UPPER}_PACKAGE_CONFIG}\n")


#[===[.md

Configure CPack.

#]===]
# set(CPACK_PACKAGE_CHECKSUM "${PROJECT_VERSION_TWEAK}")
set(CPACK_PACKAGE_VENDOR "StoneyDSP")
set(CPACK_PACKAGE_NAME "${PROJECT_NAME}-${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}-${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}")
set(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}-${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}-${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}") # Compiled binary distribution
set(CPACK_SOURCE_PACKAGE_FILE_NAME "${PROJECT_NAME}-${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}-Source") # No system spec as this is un-compiled source file distribution
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ${PROJECT_DESCRIPTION})
set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_VERSION_PATCH})
set(CPACK_PACKAGE_VERSION_TWEAK ${PROJECT_VERSION_VERSION_TWEAK})
set(CPACK_RESOURCE_FILE_LICENSE ${CMAKE_CURRENT_LIST_DIR}/LICENSE)
set(CPACK_RESOURCE_FILE_README ${CMAKE_CURRENT_LIST_DIR}/README.md)
set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY OFF)
set(CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY OFF)
set(CPACK_SOURCE_GENERATOR "TGZ;ZIP")
set(CPACK_SOURCE_IGNORE_FILES
    /.git/*
    /.cmake
    /.github
    /.vs
    /.vscode
    /.cache
    /.config
    /.local
    /doc
    /docs
    /bin
    /lib
    /usr
    /out
    /build
    /Release
    /Debug
    /MinSizeRel
    /RelWithDebInfo
    /downloads
    /installed
    /node_modules
    /vcpkg
    /.*build.*
    /package-lock.json
    /yarn.lock
    /\\\\.DS_Store
)
include(CPack)
