name: msys_ucrt64_build

on:
  pull_request:
    branches: [ "main", "develop" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  CMAKE_CONFIGURATION_TYPES: Debug;Release;RelWithDebInfo;MinSizeRel
  CMAKE_BUILD_TYPE: Release
  MSYS_TYPE: UCRT64

jobs:
  msys-ucrt64:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v3
      
      - name: Cache Restore
        id: cache-restore-pacman-ucrt64
        uses: actions/cache/restore@v3
        with:
          # A directory to store and save the cache
          path: |
            $(cygpath -u "D:\a\_temp\setup-msys2\var\cache\pacman\pkg")
          # An explicit key for restoring and saving the cache
          key: ${{ runner.os }}-pacman-ucrt64
          # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
          # restore-keys: # optional
          
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{env.MSYS_TYPE}} 
          update: true
          install: git cmake make mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-cmake mingw-w64-ucrt-x86_64-make
          
      - name: Cache Save
        id: cache-save-pacman-ucrt64
        uses: actions/cache/save@v3
        with:
          # A directory to store and save the cache
          path: |
            $(cygpath -u "D:\a\_temp\setup-msys2\var\cache\pacman\pkg")
          # $(cygpath -u "${{github.workspace}}\out\ucrt64")
          # An explicit key for restoring and saving the cache
          key: ${{ steps.cache-restore-pacman-ucrt64.outputs.cache-primary-key }}
          # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
          # restore-keys: # optional

      - name: Configure
        working-directory: ${{github.workspace}}
        # Configure CMake in a 'bin' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
          cmake -S $(cygpath -u "${{github.workspace}}") 
          -DCMAKE_C_COMPILER:FILEPATH=x86_64-w64-mingw32-gcc.exe 
          -DCMAKE_CXX_COMPILER:FILEPATH=x86_64-w64-mingw32-g++.exe 
          -DCMAKE_RC_COMPILER:FILEPATH=windres.exe 
          -DCMAKE_LINKER:FILEPATH=ld.exe 
          -DCMAKE_MAKE_PROGRAM:FILEPATH=mingw32-make.exe 
          -B $(cygpath -u "${{github.workspace}}\out\ucrt64") 
          -DCMAKE_BUILD_TYPE:STRING=${{env.BUILD_TYPE}} 
          -G "MinGW Makefiles"

      - name: Build
        working-directory: ${{github.workspace}}
        # Build your program with the given configuration
        run: cmake --build $(cygpath -u "${{github.workspace}}\out\ucrt64")

      # - name: Test
      #   working-directory: ${{github.workspace}}/build/x64-windows
      #   # Execute tests defined by the CMake configuration.
      #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #   run: ctest -C ${{env.BUILD_TYPE}}
      
      - name: Package Source
        working-directory: ${{github.workspace}}
        # Build your program with the given configuration
        run: cpack --config $(cygpath -u "${{github.workspace}}\out\ucrt64\CPackSourceConfig.cmake")

      - name: Zip
        working-directory: ${{github.workspace}}
        run: cpack -G ZIP --config $(cygpath -u "${{github.workspace}}\out\ucrt64\CPackSourceConfig.cmake")

      - name: Tar
        working-directory: ${{github.workspace}}
        run: cpack -G TGZ --config $(cygpath -u "${{github.workspace}}\out\ucrt64\CPackSourceConfig.cmake")
