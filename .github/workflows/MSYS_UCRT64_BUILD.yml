name: msys_ucrt64_build

on:
  pull_request:
    branches: [ "main", "develop" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  # Using some intentionally obscure vars to avoid false positives
  CMAKE_CONFIGURATION_TYPES: Debug;Release;RelWithDebInfo;MinSizeRel
  CMAKE_BUILD_TYPE: Release
  SOURCE_DIR: "D:/a/CxxWin/Cxxwin"
  MSYS_INSTALL_PATH: "D:/a/_temp/msys64"
  MSYS_TYPE: UCRT64
  MSYS_T_LOWER: ucrt64
  MSYS_DIR: "D:/a/_temp/msys64/ucrt64"
  BINARY_DIR: "D:/a/CxxWin/Cxxwin/out/ucrt64"

jobs:
  msys-ucrt64:
    runs-on: windows-latest
    defaults:
     run:
       shell: msys2 {0}
    steps:
      - uses: actions/checkout@v3
      
      # - name: Cache Restore
      #   id: cache-restore-pacman-ucrt64
      #   uses: actions/cache/restore@v3
      #   with:
      #     # A directory to store and save the cache
      #     path: "C:/hostedtoolcache/windows"
      #     # An explicit key for restoring and saving the cache
      #     key: ${{ runner.os }}-pacman-ucrt64
      #     # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
      #     # restore-keys: # optional
          
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{env.MSYS_TYPE}} 
          update: true
          install: git mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-cmake mingw-w64-ucrt-x86_64-make
          
      # - name: Cache Save
      #   id: cache-save-pacman-ucrt64
      #   uses: actions/cache/save@v3
      #   with:
      #     # A directory to store and save the cache
      #     path: "C:/hostedtoolcache/windows"
      #     # $(cygpath -u "${{github.workspace}}\out\ucrt64")
      #     # An explicit key for restoring and saving the cache
      #     key: ${{ steps.cache-restore-pacman-ucrt64.outputs.cache-primary-key }}
      #     # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
      #     # restore-keys: # optional

      - name: Prepare Env
        working-directory: ${{ env.SOURCE_DIR }}
        run: source ./msystem.sh

      - name: Configure
        working-directory: ${{ env.SOURCE_DIR }}
        # Configure CMake in a 'bin' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: /ucrt64/bin/cmake.exe -S . "-DCMAKE_CXX_COMPILER:FILEPATH=D:/a/_temp/msys64/ucrt64/bin/x86_64-w64-mingw32-g++.exe" "-DCMAKE_C_COMPILER:FILEPATH=D:/a/_temp/msys64/ucrt64/bin/x86_64-w64-mingw32-gcc.exe" "-DCMAKE_RC_COMPILER:FILEPATH=D:/a/_temp/msys64/ucrt64/bin/windres.exe" "-DCMAKE_LINKER:FILEPATH=D:/a/_temp/msys64/ucrt64/bin/ld.exe" "-DCMAKE_MAKE_PROGRAM:FILEPATH=D:/a/_temp/msys64/ucrt64/bin/mingw32-make.exe" "-DCMAKE_INSTALL_PREFIX:FILEPATH=${CMAKE_BINARY_DIR}/install" "-DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE" -B ./out/ucrt64 -G "MinGW Makefiles"
      
      - name: Build
        working-directory: ${{ env.SOURCE_DIR }}
        # Build your program with the given configuration
        run: /ucrt64/bin/cmake.exe --build ./out/ucrt64

      # - name: Test
      #   working-directory: ${{github.workspace}}/build/x64-windows
      #   # Execute tests defined by the CMake configuration.
      #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #   run: ctest -C ${{env.BUILD_TYPE}}
      
      - name: Package Source
        working-directory: ${{ env.SOURCE_DIR }}
        # Build your program with the given configuration
        run: /ucrt64/bin/cpack.exe --config ./out/ucrt64/CPackSourceConfig.cmake

      - name: Zip
        working-directory: ${{ env.SOURCE_DIR }}
        run: /ucrt64/bin/cpack.exe -G ZIP --config ./out/ucrt64/CPackSourceConfig.cmake

      - name: Tar
        working-directory: ${{ env.SOURCE_DIR }}
        run: /ucrt64/bin/cpack.exe -G TGZ --config ./out/ucrt64/CPackSourceConfig.cmake
