.TH "SmartPointer< ComClass >" 3Version 1.0.1" "CxxWin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SmartPointer< ComClass > \- The '\fBSmartPointer\fP' class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <win32_SmartPointer\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSmartPointer\fP () noexcept"
.br
.RI "Default-construct a new '\fBSmartPointer\fP' object\&. "
.ti -1c
.RI "\fBSmartPointer\fP (ComClass *obj)"
.br
.RI "Copy-Construct a new '\fBSmartPointer\fP' object\&. "
.ti -1c
.RI "\fBSmartPointer\fP (\fBSmartPointer\fP &other)"
.br
.RI "Move-Construct a new '\fBSmartPointer\fP' object\&. "
.ti -1c
.RI "\fB~SmartPointer\fP ()"
.br
.RI "Destroy the '\fBSmartPointer\fP' object\&. "
.ti -1c
.RI "\fBoperator ComClass *\fP () CONST noexcept"
.br
.RI "Conversion operator\&. "
.ti -1c
.RI "ComClass & \fBoperator*\fP () CONST noexcept"
.br
.RI "Conversion operator\&. "
.ti -1c
.RI "ComClass * \fBoperator\->\fP () CONST noexcept"
.br
.RI "Conversion operator\&. "
.ti -1c
.RI "\fBSmartPointer\fP & \fBoperator=\fP (ComClass *CONST newPtr)"
.br
.RI "Copy operator (pass-by-value)\&. "
.ti -1c
.RI "\fBSmartPointer\fP & \fBoperator=\fP (CONST ComClass &newPtr)"
.br
.RI "Copy operator (const pass-by-reference)\&. "
.ti -1c
.RI "ComClass ** \fBresetAndGetAddress\fP ()"
.br
.RI "Release and nullify this pointer, and return it's memory address\&. "
.ti -1c
.RI "HRESULT \fBCoCreateInstance\fP (REFCLSID rclsid, DWORD dwClsContext=CLSCTX_INPROC_SERVER)"
.br
.RI "Creates and default-initializes a single object of the class associated with a specified 'CLSID'\&. "
.ti -1c
.RI "template<class otherComClass > HRESULT \fBQueryInterface\fP (REFCLSID rclsid, \fBSmartPointer\fP< otherComClass > &destObj) CONST"
.br
.RI "Query the interface to the underlying COM object\&. "
.ti -1c
.RI "template<class otherComClass > HRESULT \fBQueryInterface\fP (\fBSmartPointer\fP< otherComClass > &destObj) CONST"
.br
.RI "Query the interface to the underlying COM object\&. "
.ti -1c
.RI "template<class otherComClass > \fBSmartPointer\fP< otherComClass > \fBgetInterface\fP () CONST"
.br
.RI "Get an interface to the underlying COM object\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBrelease\fP ()"
.br
.RI "Call the templated COM object pointer's underlying 'Release()' method\&. "
.ti -1c
.RI "ComClass ** \fBoperator&\fP () noexcept=delete"
.br
.RI "'Address-Of' operator (innaccessible)\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "ComClass * \fBptr\fP = nullptr"
.br
.RI "The underlying pointer member\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class ComClass>
.br
class SmartPointer< ComClass >"The '\fBSmartPointer\fP' class\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIComClass\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class ComClass > \fBSmartPointer\fP< ComClass >\fB::SmartPointer\fP\fC [noexcept]\fP"

.PP
Default-construct a new '\fBSmartPointer\fP' object\&. 
.SS "template<class ComClass > \fBSmartPointer\fP< ComClass >\fB::SmartPointer\fP (ComClass * obj)"

.PP
Copy-Construct a new '\fBSmartPointer\fP' object\&. 
.PP
\fBParameters\fP
.RS 4
\fIobj\fP 
.RE
.PP

.SS "template<class ComClass > \fBSmartPointer\fP< ComClass >\fB::SmartPointer\fP (\fBSmartPointer\fP< ComClass > & other)"

.PP
Move-Construct a new '\fBSmartPointer\fP' object\&. 
.PP
\fBParameters\fP
.RS 4
\fIother\fP 
.RE
.PP

.SS "template<class ComClass > \fBSmartPointer\fP< ComClass >::~\fBSmartPointer\fP"

.PP
Destroy the '\fBSmartPointer\fP' object\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<class ComClass > HRESULT \fBSmartPointer\fP< ComClass >::CoCreateInstance (REFCLSID rclsid, DWORD dwClsContext = \fCCLSCTX_INPROC_SERVER\fP)"

.PP
Creates and default-initializes a single object of the class associated with a specified 'CLSID'\&. 
.PP
\fBParameters\fP
.RS 4
\fIrclsid\fP The 'CLSID' associated with the data and code that will be used to create the object\&.
.br
\fIdwClsContext\fP 
.RE
.PP
\fBReturns\fP
.RS 4
HRESULT 
.RE
.PP

.SS "template<class ComClass > template<class otherComClass > \fBSmartPointer\fP< otherComClass > \fBSmartPointer\fP< ComClass >::getInterface"

.PP
Get an interface to the underlying COM object\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIotherComClass\fP 
.RE
.PP
\fBReturns\fP
.RS 4
SmartPointer<otherComClass> 
.RE
.PP

.SS "template<class ComClass > \fBSmartPointer\fP< ComClass >::operator ComClass *\fC [noexcept]\fP"

.PP
Conversion operator\&. 
.PP
\fBReturns\fP
.RS 4
ComClass* 
.RE
.PP

.SS "template<class ComClass > ComClass ** \fBSmartPointer\fP< ComClass >::operator& ()\fC [private]\fP, \fC [delete]\fP, \fC [noexcept]\fP"

.PP
'Address-Of' operator (innaccessible)\&. 
.PP
\fBReturns\fP
.RS 4
ComClass** 
.RE
.PP

.SS "template<class ComClass > ComClass & \fBSmartPointer\fP< ComClass >::operator*\fC [noexcept]\fP"

.PP
Conversion operator\&. 
.PP
\fBReturns\fP
.RS 4
ComClass& 
.RE
.PP

.SS "template<class ComClass > ComClass * \fBSmartPointer\fP< ComClass >::operator\->\fC [noexcept]\fP"

.PP
Conversion operator\&. 
.PP
\fBReturns\fP
.RS 4
ComClass* 
.RE
.PP

.SS "template<class ComClass > \fBSmartPointer\fP< ComClass > & \fBSmartPointer\fP< ComClass >::operator= (ComClass *CONST newPtr)"

.PP
Copy operator (pass-by-value)\&. 
.PP
\fBParameters\fP
.RS 4
\fInewPtr\fP 
.RE
.PP
\fBReturns\fP
.RS 4
\fBSmartPointer\fP& 
.RE
.PP

.SS "template<class ComClass > \fBSmartPointer\fP< ComClass > & \fBSmartPointer\fP< ComClass >::operator= (CONST ComClass & newPtr)"

.PP
Copy operator (const pass-by-reference)\&. 
.PP
\fBParameters\fP
.RS 4
\fInewPtr\fP 
.RE
.PP
\fBReturns\fP
.RS 4
\fBSmartPointer\fP& 
.RE
.PP

.SS "template<class ComClass > template<class otherComClass > HRESULT \fBSmartPointer\fP< ComClass >::QueryInterface (REFCLSID rclsid, \fBSmartPointer\fP< otherComClass > & destObj)"

.PP
Query the interface to the underlying COM object\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIotherComClass\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIrclsid\fP 
.br
\fIdestObj\fP 
.RE
.PP
\fBReturns\fP
.RS 4
HRESULT 
.RE
.PP

.SS "template<class ComClass > template<class otherComClass > HRESULT \fBSmartPointer\fP< ComClass >::QueryInterface (\fBSmartPointer\fP< otherComClass > & destObj)"

.PP
Query the interface to the underlying COM object\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIotherComClass\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIdestObj\fP 
.RE
.PP
\fBReturns\fP
.RS 4
HRESULT 
.RE
.PP

.SS "template<class ComClass > void \fBSmartPointer\fP< ComClass >::release\fC [private]\fP"

.PP
Call the templated COM object pointer's underlying 'Release()' method\&. 
.SS "template<class ComClass > ComClass ** \fBSmartPointer\fP< ComClass >::resetAndGetAddress"

.PP
Release and nullify this pointer, and return it's memory address\&. 
.PP
\fBReturns\fP
.RS 4
ComClass** 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "template<class ComClass > ComClass* \fBSmartPointer\fP< ComClass >::ptr = nullptr\fC [private]\fP"

.PP
The underlying pointer member\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for CxxWin from the source code\&.
