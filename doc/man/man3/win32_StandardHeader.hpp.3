.TH "include/CxxWin/modules/Win32_core/system/win32_StandardHeader.hpp" 3Version 1.0.1" "CxxWin" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/CxxWin/modules/Win32_core/system/win32_StandardHeader.hpp \- Contains some standard definitions, functions, and includes familiar to all supported platforms and architectures\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <algorithm>\fP
.br
\fC#include <array>\fP
.br
\fC#include <atomic>\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <condition_variable>\fP
.br
\fC#include <cstddef>\fP
.br
\fC#include <functional>\fP
.br
\fC#include <future>\fP
.br
\fC#include <iomanip>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <limits>\fP
.br
\fC#include <list>\fP
.br
\fC#include <map>\fP
.br
\fC#include <memory>\fP
.br
\fC#include <mutex>\fP
.br
\fC#include <numeric>\fP
.br
\fC#include <optional>\fP
.br
\fC#include <queue>\fP
.br
\fC#include <set>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <thread>\fP
.br
\fC#include <typeindex>\fP
.br
\fC#include <unordered_map>\fP
.br
\fC#include <unordered_set>\fP
.br
\fC#include <utility>\fP
.br
\fC#include <variant>\fP
.br
\fC#include <vector>\fP
.br
\fC#include 'win32_CompilerSupport\&.hpp'\fP
.br
\fC#include 'win32_PlatformDefs\&.hpp'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_WIN32_STANDARDHEADER_HPP_\fP"
.br
.RI "Contains some standard definitions, functions, and includes familiar to all supported platforms and architectures\&. "
.ti -1c
.RI "#define \fB__has_attribute\fP(x)   0"
.br
.RI "If the compiler does not have __has_*(), pretend the answer is always no\&. "
.ti -1c
.RI "#define \fB__has_extension\fP   \fB__has_feature\fP"
.br
.ti -1c
.RI "#define \fB__has_feature\fP(x)   0"
.br
.ti -1c
.RI "#define \fB__has_include\fP(x)   0"
.br
.ti -1c
.RI "#define \fB__has_builtin\fP(x)   0"
.br
.ti -1c
.RI "#define \fBSTRINGIFY_HELPER\fP(X)   #X"
.br
.RI "Helper macro to quote an argument, turning it into a string\&. "
.ti -1c
.RI "#define \fBSTRINGIFY\fP(X)   \fBSTRINGIFY_HELPER\fP(X)"
.br
.RI "Quote the argument, turning it into a string\&. "
.ti -1c
.RI "#define \fBCONCAT_HELPER\fP(a,  b)   a##b"
.br
.RI "Helper macro to concatenate two tokens to form a new token\&. "
.ti -1c
.RI "#define \fBCONCAT\fP(a,  b)   \fBCONCAT_HELPER\fP(a, b)"
.br
.RI "Concatenate two tokens to form a new token\&. "
.in -1c
.PP
.RI "\fBDEC\fP"
.br
Convert integer to decimal digit literals\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "#define \fBDEC\fP(n)"
.br
.in -1c
.in -1c
.PP
.RI "\fBHEX\fP"
.br
Convert integer to hex digit literals\&. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "#define \fBHEX\fP(n)"
.br
.ti -1c
.RI "#define \fBCXXWIN_VERSION_MAJOR\fP   1"
.br
.RI "Current version number (major)\&. "
.ti -1c
.RI "#define \fBCXXWIN_VERSION_MINOR\fP   0"
.br
.RI "Current version number (minor)\&. "
.ti -1c
.RI "#define \fBCXXWIN_VERSION_PATCH\fP   1"
.br
.RI "Current version number (patch)\&. "
.ti -1c
.RI "#define \fBCXXWIN_VERSION\fP   ((\fBCXXWIN_VERSION_MAJOR\fP << 16) + (\fBCXXWIN_VERSION_MINOR\fP << 8) + \fBCXXWIN_VERSION_PATCH\fP)"
.br
.RI "Current version number\&. "
.ti -1c
.RI "#define \fBCXXWIN_VERSION_ID\fP       [[maybe_unused]] volatile auto CxxWinVersionId = 'cxxwin_version_' \fBSTRINGIFY\fP(\fBCXXWIN_VERSION_MAJOR\fP) '_' \fBSTRINGIFY\fP(\fBCXXWIN_VERSION_MINOR\fP) '_' \fBSTRINGIFY\fP(\fBCXXWIN_VERSION_PATCH\fP);"
.br
.ti -1c
.RI "#define \fBCXXWIN_LONG_NAME\fP   TEXT('CxxWin') \fBSTRINGIFY\fP(\&.) \fBSTRINGIFY\fP(\fBCXXWIN_VERSION_MAJOR\fP) \fBSTRINGIFY\fP(\&.) \fBSTRINGIFY\fP(\fBCXXWIN_VERSION_MINOR\fP) \fBSTRINGIFY\fP(\&.) \fBSTRINGIFY\fP(\fBCXXWIN_VERSION_PATCH\fP)"
.br
.in -1c
.in -1c
.SH "Detailed Description"
.PP 
Contains some standard definitions, functions, and includes familiar to all supported platforms and architectures\&. 


.PP
\fBAuthor\fP
.RS 4
StoneyDSP (nathanjhood@googlemail.com)
.RE
.PP
.PP
\fBVersion\fP
.RS 4
1\&.0\&.0 
.RE
.PP
\fBDate\fP
.RS 4
2023-08-24
.RE
.PP
\fBCopyright\fP
.RS 4
Copyright (c) 2023 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define __has_attribute(x)   0"

.PP
If the compiler does not have __has_*(), pretend the answer is always no\&. 
.SS "#define __has_builtin(x)   0"

.SS "#define __has_extension   \fB__has_feature\fP"

.SS "#define __has_feature(x)   0"

.SS "#define __has_include(x)   0"

.SS "#define _WIN32_STANDARDHEADER_HPP_"

.PP
Contains some standard definitions, functions, and includes familiar to all supported platforms and architectures\&. 
.SS "#define CONCAT(a, b)   \fBCONCAT_HELPER\fP(a, b)"

.PP
Concatenate two tokens to form a new token\&. 
.SS "#define CONCAT_HELPER(a, b)   a##b"

.PP
Helper macro to concatenate two tokens to form a new token\&. 
.SS "#define CXXWIN_LONG_NAME   TEXT('CxxWin') \fBSTRINGIFY\fP(\&.) \fBSTRINGIFY\fP(\fBCXXWIN_VERSION_MAJOR\fP) \fBSTRINGIFY\fP(\&.) \fBSTRINGIFY\fP(\fBCXXWIN_VERSION_MINOR\fP) \fBSTRINGIFY\fP(\&.) \fBSTRINGIFY\fP(\fBCXXWIN_VERSION_PATCH\fP)"

.SS "#define CXXWIN_VERSION   ((\fBCXXWIN_VERSION_MAJOR\fP << 16) + (\fBCXXWIN_VERSION_MINOR\fP << 8) + \fBCXXWIN_VERSION_PATCH\fP)"

.PP
Current version number\&. Bits 16 to 32 = major version\&. Bits 8 to 16 = minor version\&. Bits 0 to 8 = point release\&. 
.SS "#define CXXWIN_VERSION_ID       [[maybe_unused]] volatile auto CxxWinVersionId = 'cxxwin_version_' \fBSTRINGIFY\fP(\fBCXXWIN_VERSION_MAJOR\fP) '_' \fBSTRINGIFY\fP(\fBCXXWIN_VERSION_MINOR\fP) '_' \fBSTRINGIFY\fP(\fBCXXWIN_VERSION_PATCH\fP);"

.SS "#define CXXWIN_VERSION_MAJOR   1"

.PP
Current version number (major)\&. 
.SS "#define CXXWIN_VERSION_MINOR   0"

.PP
Current version number (minor)\&. 
.SS "#define CXXWIN_VERSION_PATCH   1"

.PP
Current version number (patch)\&. 
.SS "#define DEC(n)"
\fBValue:\fP.PP
.nf
       ('0' + (((n) / 10000000)%10)), \\
       ('0' + (((n) / 1000000)%10)),  \\
       ('0' + (((n) / 100000)%10)),   \\
       ('0' + (((n) / 10000)%10)),    \\
       ('0' + (((n) / 1000)%10)),     \\
       ('0' + (((n) / 100)%10)),      \\
       ('0' + (((n) / 10)%10)),       \\
       ('0' +  ((n) % 10))
.fi

.SS "#define HEX(n)"
\fBValue:\fP.PP
.nf
        ('0' + ((n)>>28 & 0xF)), \\
        ('0' + ((n)>>24 & 0xF)), \\
        ('0' + ((n)>>20 & 0xF)), \\
        ('0' + ((n)>>16 & 0xF)), \\
        ('0' + ((n)>>12 & 0xF)), \\
        ('0' + ((n)>>8  & 0xF)), \\
        ('0' + ((n)>>4  & 0xF)), \\
        ('0' + ((n)     & 0xF))
.fi

.SS "#define STRINGIFY(X)   \fBSTRINGIFY_HELPER\fP(X)"

.PP
Quote the argument, turning it into a string\&. 
.SS "#define STRINGIFY_HELPER(X)   #X"

.PP
Helper macro to quote an argument, turning it into a string\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for CxxWin from the source code\&.
