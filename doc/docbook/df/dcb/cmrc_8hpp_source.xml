<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_cmrc_8hpp_source" xml:lang="en-US">
<title>cmrc.hpp</title>
<indexterm><primary>include/CxxWin/modules/Win32_resource/cmrc.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 
29 <emphasis role="preprocessor">#ifndef&#32;CMRC_CMRC_HPP_INCLUDED</emphasis>
30 <emphasis role="preprocessor">#define&#32;CMRC_CMRC_HPP_INCLUDED</emphasis>
31 
32 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
33 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>
34 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
35 <emphasis role="preprocessor">#include&#32;&lt;list&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;mutex&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;system_error&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
41 
42 <emphasis role="preprocessor">#if&#32;!(defined(__EXCEPTIONS)&#32;||&#32;defined(__cpp_exceptions)&#32;||&#32;defined(_CPPUNWIND)&#32;||&#32;defined(CMRC_NO_EXCEPTIONS))</emphasis>
44 <emphasis role="preprocessor">#&#32;&#32;define&#32;CMRC_NO_EXCEPTIONS&#32;1</emphasis>
45 <emphasis role="preprocessor">#endif</emphasis>
46 
53 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_c_make_r_c">CMakeRC</link>
54 {
61 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_detail">Detail</link>
62 {
70 <emphasis role="keyword">struct&#32;</emphasis>Dummy;
71 }
72 }
73 
74 <emphasis role="preprocessor">#define&#32;CMRC_DECLARE(LibId)&#32;\</emphasis>
75 <emphasis role="preprocessor">namespace&#32;CMakeRC&#32;\</emphasis>
76 <emphasis role="preprocessor">{&#32;\</emphasis>
77 <emphasis role="preprocessor">namespace&#32;Detail&#32;\</emphasis>
78 <emphasis role="preprocessor">{&#32;\</emphasis>
79 <emphasis role="preprocessor">struct&#32;Dummy;&#32;\</emphasis>
80 <emphasis role="preprocessor">static_assert(std::is_same&lt;Dummy,&#32;::CMakeRC::Detail::Dummy&gt;::value,&#32;&quot;CMRC_DECLARE()&#32;must&#32;only&#32;appear&#32;at&#32;the&#32;global&#32;namespace&quot;</emphasis>);&#32;\
81 }&#32;\
82 }&#32;\
83 namespace&#32;CMakeRC&#32;\
84 {&#32;\
85 namespace&#32;LibId&#32;\
86 {&#32;\
87 CMakeRC::EmbeddedFileSystem&#32;GetFileSystem();&#32;\
88 }&#32;\
89 }&#32;static_assert(true,&#32;&quot;&quot;)
90 
91 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_c_make_r_c">CMakeRC</link>
92 {
98 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_file">File</link>
99 {
100 <emphasis role="keyword">public</emphasis>:
101 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_file_1a15ff727ef2f71bdc6a6e16e909764fe0">Iterator</link>&#32;=&#32;<link linkend="_win32__resource_8hpp_1af13d0262d2bbd96845361a8cc0e0c268">RCRESOURCEPTR</link>;
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_file_1a409b19a989325a4f9c1cc853a90aa45d">ConstIterator</link>&#32;=&#32;<link linkend="_class_c_make_r_c_1_1_file_1a15ff727ef2f71bdc6a6e16e909764fe0">Iterator</link>;
103 
108 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_file_1a73500aa6c3dfaacf203d8d227d22ff36">File</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
115 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_file_1a7490f309a3f2579ae6568bae31923aa9">File</link>(<link linkend="_class_c_make_r_c_1_1_file_1a15ff727ef2f71bdc6a6e16e909764fe0">Iterator</link>&#32;beg,&#32;<link linkend="_class_c_make_r_c_1_1_file_1a15ff727ef2f71bdc6a6e16e909764fe0">Iterator</link>&#32;end)&#32;noexcept&#32;:&#32;<link linkend="_class_c_make_r_c_1_1_file_1ae620455a132951e883cb61ff4af16f02">_begin</link>(beg),&#32;<link linkend="_class_c_make_r_c_1_1_file_1a701343f0f39c2d7e037a7359f98f62da">_end</link>(end)&#32;{}
121 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_file_1a15ff727ef2f71bdc6a6e16e909764fe0">Iterator</link>&#32;<link linkend="_class_c_make_r_c_1_1_file_1a8190a209e6a026ee8fab3244412d11bb">Begin</link>()&#32;const&#32;noexcept
122 &#32;&#32;&#32;&#32;{
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_file_1ae620455a132951e883cb61ff4af16f02">_begin</link>;
124 &#32;&#32;&#32;&#32;}
130 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_file_1a15ff727ef2f71bdc6a6e16e909764fe0">Iterator</link>&#32;<link linkend="_class_c_make_r_c_1_1_file_1affe52cb4e1449c3c522aec515631828e">CBegin</link>()&#32;const&#32;noexcept
131 &#32;&#32;&#32;&#32;{
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_file_1ae620455a132951e883cb61ff4af16f02">_begin</link>;
133 &#32;&#32;&#32;&#32;}
139 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_file_1a15ff727ef2f71bdc6a6e16e909764fe0">Iterator</link>&#32;<link linkend="_class_c_make_r_c_1_1_file_1a690dfb10e300098bf1ce19e38bee236b">End</link>()&#32;const&#32;noexcept
140 &#32;&#32;&#32;&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_file_1a701343f0f39c2d7e037a7359f98f62da">_end</link>;
142 &#32;&#32;&#32;&#32;}
148 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_file_1a15ff727ef2f71bdc6a6e16e909764fe0">Iterator</link>&#32;<link linkend="_class_c_make_r_c_1_1_file_1a2f16cd3bfd3bc7aeaef3eebbb882b684">CEnd</link>()&#32;const&#32;noexcept
149 &#32;&#32;&#32;&#32;{
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_file_1a701343f0f39c2d7e037a7359f98f62da">_end</link>;
151 &#32;&#32;&#32;&#32;}
157 &#32;&#32;&#32;&#32;std::size_t&#32;<link linkend="_class_c_make_r_c_1_1_file_1ae50497b1ca22530f084d3b9cc48da9a6">Size</link>()<emphasis role="keyword">&#32;const</emphasis>
158 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::size_t<emphasis role="keyword">&gt;</emphasis>(std::distance(<link linkend="_class_c_make_r_c_1_1_file_1a8190a209e6a026ee8fab3244412d11bb">Begin</link>(),&#32;<link linkend="_class_c_make_r_c_1_1_file_1a690dfb10e300098bf1ce19e38bee236b">End</link>()));
160 &#32;&#32;&#32;&#32;}
161 
162 <emphasis role="keyword">private</emphasis>:
167 &#32;&#32;&#32;&#32;<link linkend="_win32__resource_8hpp_1af13d0262d2bbd96845361a8cc0e0c268">RCRESOURCEPTR</link>&#32;<link linkend="_class_c_make_r_c_1_1_file_1ae620455a132951e883cb61ff4af16f02">_begin</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
172 &#32;&#32;&#32;&#32;<link linkend="_win32__resource_8hpp_1af13d0262d2bbd96845361a8cc0e0c268">RCRESOURCEPTR</link>&#32;<link linkend="_class_c_make_r_c_1_1_file_1a701343f0f39c2d7e037a7359f98f62da">_end</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
173 };
174 
180 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_directory_entry">DirectoryEntry</link>;
181 
182 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_detail">Detail</link>
183 {
190 <emphasis role="keyword">class&#32;</emphasis>Directory;
191 
198 <emphasis role="keyword">class&#32;</emphasis>FileData;
199 
206 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory">FileOrDirectory</link>
207 {
208 <emphasis role="keyword">public</emphasis>:
214 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1a2038b105526e304e8dc4eaf2c08d7371">FileOrDirectory</link>(<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_data">FileData</link>&amp;&#32;f)
215 &#32;&#32;&#32;&#32;{
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1a0320eaf17d4042508cb7182f0da57e32">_data</link>.<link linkend="_union_c_make_r_c_1_1_detail_1_1_file_or_directory_1_1__data__t_1acbf70db2aed1fbc0759700954fd99fec">FileData</link>&#32;=&#32;&amp;f;
217 &#32;&#32;&#32;&#32;}
223 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1a7ed2fb44d81150cf5b0446cc717018af">FileOrDirectory</link>(<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory">Directory</link>&amp;&#32;d)
224 &#32;&#32;&#32;&#32;{
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1a0320eaf17d4042508cb7182f0da57e32">_data</link>.<link linkend="_union_c_make_r_c_1_1_detail_1_1_file_or_directory_1_1__data__t_1a141a50e444eccb832148435433499864">Directory</link>&#32;=&#32;&amp;d;
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1a5f3961d4f94b3735131c2b9970f41615">_is_file</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
227 &#32;&#32;&#32;&#32;}
234 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1a68fac370f8ff769caa898820b963bf14">IsFile</link>()&#32;const&#32;noexcept
235 &#32;&#32;&#32;&#32;{
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1a5f3961d4f94b3735131c2b9970f41615">_is_file</link>;
237 &#32;&#32;&#32;&#32;}
244 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1aafd677b5751bb0b18785bebdf5af8b76">IsDirectory</link>()&#32;const&#32;noexcept
245 &#32;&#32;&#32;&#32;{
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1a68fac370f8ff769caa898820b963bf14">IsFile</link>();
247 &#32;&#32;&#32;&#32;}
253 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory">Directory</link>&amp;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1adc7825ac25d1c365981aa55071b2d960">AsDirectory</link>()&#32;const&#32;noexcept
254 &#32;&#32;&#32;&#32;{
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(!<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1a68fac370f8ff769caa898820b963bf14">IsFile</link>());
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1a0320eaf17d4042508cb7182f0da57e32">_data</link>.<link linkend="_union_c_make_r_c_1_1_detail_1_1_file_or_directory_1_1__data__t_1a141a50e444eccb832148435433499864">Directory</link>;
257 &#32;&#32;&#32;&#32;}
263 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_data">FileData</link>&amp;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1aa5d382deb2e8535c46a63b5a4d770cde">AsFile</link>()&#32;const&#32;noexcept
264 &#32;&#32;&#32;&#32;{
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1a68fac370f8ff769caa898820b963bf14">IsFile</link>());
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1a0320eaf17d4042508cb7182f0da57e32">_data</link>.<link linkend="_union_c_make_r_c_1_1_detail_1_1_file_or_directory_1_1__data__t_1acbf70db2aed1fbc0759700954fd99fec">FileData</link>;
267 &#32;&#32;&#32;&#32;}
268 <emphasis role="keyword">private</emphasis>:
269 &#32;&#32;&#32;&#32;<emphasis role="keyword">union&#32;</emphasis><link linkend="_union_c_make_r_c_1_1_detail_1_1_file_or_directory_1_1__data__t">_data_t</link>
270 &#32;&#32;&#32;&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_detail_1_1_file_data">FileData</link>*&#32;<link linkend="_union_c_make_r_c_1_1_detail_1_1_file_or_directory_1_1__data__t_1acbf70db2aed1fbc0759700954fd99fec">FileData</link>;
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_detail_1_1_directory">Directory</link>*&#32;<link linkend="_union_c_make_r_c_1_1_detail_1_1_file_or_directory_1_1__data__t_1a141a50e444eccb832148435433499864">Directory</link>;
273 &#32;&#32;&#32;&#32;}&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1a0320eaf17d4042508cb7182f0da57e32">_data</link>;
274 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1a5f3961d4f94b3735131c2b9970f41615">_is_file</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
275 };
276 
282 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_detail_1_1_file_data">FileData</link>
283 {
284 <emphasis role="keyword">public</emphasis>:
291 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_data_1ab652c9133fdf6f086603c5cac4095b7e">FileData</link>(<link linkend="_win32__resource_8hpp_1af13d0262d2bbd96845361a8cc0e0c268">RCRESOURCEPTR</link>&#32;b,&#32;<link linkend="_win32__resource_8hpp_1af13d0262d2bbd96845361a8cc0e0c268">RCRESOURCEPTR</link>&#32;e)&#32;:&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_data_1a02153c6e1ef5d9aeb40abfe1023b92d3">begin_ptr</link>(b),&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_data_1ad2b8490904a373caa51c8a2ce4c6d935">end_ptr</link>(e)&#32;{}
296 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_data_1a7bfd974316fceb83eab3d28069a8d91d">FileData</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_data">FileData</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
297 
298 &#32;&#32;&#32;&#32;<link linkend="_win32__resource_8hpp_1af13d0262d2bbd96845361a8cc0e0c268">RCRESOURCEPTR</link>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_data_1a02153c6e1ef5d9aeb40abfe1023b92d3">begin_ptr</link>;
299 &#32;&#32;&#32;&#32;<link linkend="_win32__resource_8hpp_1af13d0262d2bbd96845361a8cc0e0c268">RCRESOURCEPTR</link>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_data_1ad2b8490904a373caa51c8a2ce4c6d935">end_ptr</link>;
300 };
301 
308 <emphasis role="keyword">inline</emphasis>&#32;std::pair&lt;std::string,&#32;std::string&gt;&#32;<link linkend="_namespace_c_make_r_c_1_1_detail_1a66d1ba033d0fd3128f0c20fc3652070a">SplitPath</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path)
309 {
310 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;first_sep&#32;=&#32;path.find(<emphasis role="stringliteral">&quot;/&quot;</emphasis>);
311 
312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(first_sep&#32;==&#32;path.npos)
313 &#32;&#32;&#32;&#32;{
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(path,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
315 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(path.substr(0,&#32;first_sep),&#32;path.substr(first_sep&#32;+&#32;1));
317 &#32;&#32;&#32;&#32;}
318 }
319 
326 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_c_make_r_c_1_1_detail_1_1_created_sub_directory">CreatedSubDirectory</link>
327 {
328 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_detail_1_1_directory">Directory</link>&amp;&#32;<link linkend="_struct_c_make_r_c_1_1_detail_1_1_created_sub_directory_1a225b4cdbdb42d83831c630de10a6aa09">Directory</link>;
329 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory">FileOrDirectory</link>&amp;&#32;<link linkend="_struct_c_make_r_c_1_1_detail_1_1_created_sub_directory_1a637b11814abbfa2c0ddac8984bb60e08">IndexEntry</link>;
330 };
331 
338 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_detail_1_1_directory">Directory</link>
339 {
340 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a9702671345e2a242f6f245987b5367fc">BaseIterator</link>&#32;=&#32;std::map&lt;std::string,&#32;FileOrDirectory&gt;::const_iterator;
341 
342 <emphasis role="keyword">public</emphasis>:
347 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a11b5d65496f7c6548acb3a021c52dab9">Directory</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
348 
353 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a14df5ba2e753400f86921ee8d51978de">Directory</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory">Directory</link>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
354 
361 &#32;&#32;&#32;&#32;<link linkend="_struct_c_make_r_c_1_1_detail_1_1_created_sub_directory">CreatedSubDirectory</link>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a69a33c818bec9e2afb82de42aeb331df">AddSubDir</link>(std::string&#32;name)&#32;&amp;
362 &#32;&#32;&#32;&#32;{
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a23ae57416849fce4dfc61d24a43c61ce">_dirs</link>.emplace_back();
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;back&#32;=&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a23ae57416849fce4dfc61d24a43c61ce">_dirs</link>.back();
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;fod&#32;=&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1abab781792e29a0f758f09fe378fe7aba">_index</link>.emplace(name,&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory">FileOrDirectory</link>{back}).first-&gt;second;
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_c_make_r_c_1_1_detail_1_1_created_sub_directory">CreatedSubDirectory</link>{back,&#32;fod};
367 &#32;&#32;&#32;&#32;}
368 
377 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory">FileOrDirectory</link>*&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a2d68a46ef296e1419b9284404dd7f6e8">AddFile</link>(std::string&#32;name,&#32;<link linkend="_win32__resource_8hpp_1af13d0262d2bbd96845361a8cc0e0c268">RCRESOURCEPTR</link>&#32;begin,&#32;<link linkend="_win32__resource_8hpp_1af13d0262d2bbd96845361a8cc0e0c268">RCRESOURCEPTR</link>&#32;end)&#32;&amp;
378 &#32;&#32;&#32;&#32;{
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1abab781792e29a0f758f09fe378fe7aba">_index</link>.find(name)&#32;==&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1abab781792e29a0f758f09fe378fe7aba">_index</link>.end());
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a3148cfe9eccc3819c5c15e2e1c3db8ac">_files</link>.emplace_back(begin,&#32;end);
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1abab781792e29a0f758f09fe378fe7aba">_index</link>.emplace(name,&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory">FileOrDirectory</link>{<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a3148cfe9eccc3819c5c15e2e1c3db8ac">_files</link>.back()}).first-&gt;second;
382 &#32;&#32;&#32;&#32;}
383 
390 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory">FileOrDirectory</link>*&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a1a37503b11b08f3267f6c33cee47fc23">Get</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path)<emphasis role="keyword">&#32;const</emphasis>
391 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;pair&#32;=&#32;<link linkend="_namespace_c_make_r_c_1_1_detail_1a66d1ba033d0fd3128f0c20fc3652070a">SplitPath</link>(path);
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;child&#32;=&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1abab781792e29a0f758f09fe378fe7aba">_index</link>.find(pair.first);
394 
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(child&#32;==&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1abab781792e29a0f758f09fe378fe7aba">_index</link>.end())
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;entry&#32;&#32;=&#32;child-&gt;second;
400 
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pair.second.empty())
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&apos;re&#32;at&#32;the&#32;end&#32;of&#32;the&#32;path</emphasis>
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;entry;
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
406 
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(entry.IsFile())
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;can&apos;t&#32;traverse&#32;into&#32;a&#32;file.&#32;Stop.</emphasis>
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
412 
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Keep&#32;going&#32;down</emphasis>
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;entry.AsDirectory().Get(pair.second);
415 &#32;&#32;&#32;&#32;}
416 
421 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">Iterator</link>
422 &#32;&#32;&#32;&#32;{
423 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_directory_entry">ValueType</link>&#32;=&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry">DirectoryEntry</link>;
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a2939cae9653e6a7c0b679d496e01db42">DifferenceType</link>&#32;=&#32;std::ptrdiff_t;
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_directory_entry">pointer</link>&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry">ValueType</link>*;
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_directory_entry">reference</link>&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry">ValueType</link>&amp;;
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a694b50c7e4039f4fe077ab64c9904377">IteratorCategory</link>&#32;=&#32;std::input_iterator_tag;
429 
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a3adf6d733347cd4f988f49c35b75ff93">Iterator</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
435 
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1abc285da5bc94423407401bcd9e6b8672">Iterator</link>(<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a9702671345e2a242f6f245987b5367fc">BaseIterator</link>&#32;iter,&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a9702671345e2a242f6f245987b5367fc">BaseIterator</link>&#32;end)&#32;:&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a90d2ad375b46f9feb1c091305227cbe8">_base_iter</link>(iter),&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1aa71298b1f355b6b6f5716e7c5f0f0405">_end_iter</link>(end)&#32;{}
443 
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">Iterator</link>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a33d2a59815371ffaf72a553048efc5e0">Begin</link>()&#32;const&#32;noexcept
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
452 
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">Iterator</link>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a4339f3814d089274ebb0f1f37af2c47a">End</link>()&#32;const&#32;noexcept
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a3adf6d733347cd4f988f49c35b75ff93">Iterator</link>(<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1aa71298b1f355b6b6f5716e7c5f0f0405">_end_iter</link>,&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1aa71298b1f355b6b6f5716e7c5f0f0405">_end_iter</link>);
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
461 
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a7b09a33b23a72041c3d60d34c793a9e1">ValueType</link>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1ad7159b61c886fc6639a11cfa0e1d3f88">operator*</link>()&#32;const&#32;noexcept;
467 
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(const&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">Iterator</link>&amp;&#32;rhs)&#32;const&#32;noexcept
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a90d2ad375b46f9feb1c091305227cbe8">_base_iter</link>&#32;==&#32;rhs._base_iter;
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
478 
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1ac5bacfe1875369c54eed050d0044397c">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">Iterator</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;==&#32;rhs);
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
490 
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">Iterator</link>&amp;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a0cd610a6a09fe457d447b0b283be4998">operator++</link>()&#32;noexcept
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a90d2ad375b46f9feb1c091305227cbe8">_base_iter</link>;
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
501 
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">Iterator</link>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a78e28e88ff8be18a2cbfd6c1610461d1">operator++</link>(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;cp&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a90d2ad375b46f9feb1c091305227cbe8">_base_iter</link>;
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cp;
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
512 
513 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a9702671345e2a242f6f245987b5367fc">BaseIterator</link>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a90d2ad375b46f9feb1c091305227cbe8">_base_iter</link>;
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a9702671345e2a242f6f245987b5367fc">BaseIterator</link>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1aa71298b1f355b6b6f5716e7c5f0f0405">_end_iter</link>;
516 &#32;&#32;&#32;&#32;};
517 
518 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">ConstIterator</link>&#32;=&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">Iterator</link>;
519 
525 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">Iterator</link>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1ae1569fc4fb303b079330ca6f4241d2c2">Begin</link>()&#32;const&#32;noexcept
526 &#32;&#32;&#32;&#32;{
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">Iterator</link>(<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1abab781792e29a0f758f09fe378fe7aba">_index</link>.begin(),&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1abab781792e29a0f758f09fe378fe7aba">_index</link>.end());
528 &#32;&#32;&#32;&#32;}
529 
535 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">Iterator</link>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a3a51d595262bb6ca91f85b4e106b105f">End</link>()&#32;const&#32;noexcept
536 &#32;&#32;&#32;&#32;{
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">Iterator</link>();
538 &#32;&#32;&#32;&#32;}
539 <emphasis role="keyword">private</emphasis>:
540 &#32;&#32;&#32;&#32;std::list&lt;FileData&gt;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a3148cfe9eccc3819c5c15e2e1c3db8ac">_files</link>;
541 &#32;&#32;&#32;&#32;std::list&lt;Directory&gt;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1a23ae57416849fce4dfc61d24a43c61ce">_dirs</link>;
542 &#32;&#32;&#32;&#32;std::map&lt;std::string,&#32;FileOrDirectory&gt;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1abab781792e29a0f758f09fe378fe7aba">_index</link>;
543 };
544 
551 <emphasis role="keyword">inline</emphasis>&#32;std::string&#32;<link linkend="_namespace_c_make_r_c_1_1_detail_1a6553506577f146fdcb7e1588a74dd102">NormalizePath</link>(std::string&#32;path)
552 {
553 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(path.find(<emphasis role="stringliteral">&quot;/&quot;</emphasis>)&#32;==&#32;0)
554 &#32;&#32;&#32;&#32;{
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path.erase(path.begin());
556 &#32;&#32;&#32;&#32;}
557 
558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!path.empty()&#32;&amp;&amp;&#32;(path.rfind(<emphasis role="stringliteral">&quot;/&quot;</emphasis>)&#32;==&#32;path.size()&#32;-&#32;1))
559 &#32;&#32;&#32;&#32;{
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path.pop_back();
561 &#32;&#32;&#32;&#32;}
562 
563 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;off&#32;=&#32;path.npos;
564 
565 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;((off&#32;=&#32;path.find(<emphasis role="stringliteral">&quot;//&quot;</emphasis>))&#32;!=&#32;path.npos)
566 &#32;&#32;&#32;&#32;{
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path.erase(path.begin()&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::string::difference_type<emphasis role="keyword">&gt;</emphasis>(off));
568 &#32;&#32;&#32;&#32;}
569 
570 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;path;
571 }
572 
573 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_c_make_r_c_1_1_detail_1af8b7b0ba529bcc74373e4ee395b54529">IndexType</link>&#32;=&#32;std::map&lt;std::string,&#32;const&#32;CMakeRC::Detail::FileOrDirectory*&gt;;
574 
575 }&#32;<emphasis role="comment">//&#32;namespace&#32;CMakeRC::Detail</emphasis>
576 
582 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_directory_entry">DirectoryEntry</link>
583 {
584 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry_1a646b40c7b36660599356f97d8bd506d8">_fname</link>;
585 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory">Detail::FileOrDirectory</link>*&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry_1ae1a59731a6b7a04239dbfe8484c7ec25">_item</link>;
586 <emphasis role="keyword">public</emphasis>:
591 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry_1afa4e984e646c6fd9802fc888a6adb09b">DirectoryEntry</link>()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
592 
599 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry_1adac92932fc5ad6f98cde2392fdc3dc4e">DirectoryEntry</link>(std::string&#32;filename,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory">Detail::FileOrDirectory</link>&amp;&#32;item)
600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry_1a646b40c7b36660599356f97d8bd506d8">_fname</link>(filename)
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry_1ae1a59731a6b7a04239dbfe8484c7ec25">_item</link>(&amp;item)
602 &#32;&#32;&#32;&#32;{}
603 
609 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry_1a3201c2d5ac5e2268f669ed1b7aa4bdce">Filename</link>()&#32;const&#32;&amp;
610 &#32;&#32;&#32;&#32;{
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry_1a646b40c7b36660599356f97d8bd506d8">_fname</link>;
612 &#32;&#32;&#32;&#32;}
613 
619 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry_1acbf4f57d8c5688879ee63e3d39634416">Filename</link>()&#32;const&#32;&amp;&amp;
620 &#32;&#32;&#32;&#32;{
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move(<link linkend="_class_c_make_r_c_1_1_directory_entry_1a646b40c7b36660599356f97d8bd506d8">_fname</link>);
622 &#32;&#32;&#32;&#32;}
623 
630 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry_1aa6f38441e073b7c203aaeb573bd43b7a">IsFile</link>()<emphasis role="keyword">&#32;const</emphasis>
631 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry_1ae1a59731a6b7a04239dbfe8484c7ec25">_item</link>-&gt;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1a68fac370f8ff769caa898820b963bf14">IsFile</link>();
633 &#32;&#32;&#32;&#32;}
634 
641 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry_1a0630f2f2c01df34707c28f386ea3fa90">IsDirectory</link>()<emphasis role="keyword">&#32;const</emphasis>
642 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry_1ae1a59731a6b7a04239dbfe8484c7ec25">_item</link>-&gt;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory_1aafd677b5751bb0b18785bebdf5af8b76">IsDirectory</link>();
644 &#32;&#32;&#32;&#32;}
645 };
646 
651 <link linkend="_class_c_make_r_c_1_1_directory_entry">DirectoryEntry</link>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1ad7159b61c886fc6639a11cfa0e1d3f88">Detail::Directory::Iterator::operator*</link>()&#32;const&#32;noexcept
652 {
653 &#32;&#32;&#32;&#32;assert(<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a33d2a59815371ffaf72a553048efc5e0">Begin</link>()&#32;!=&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a4339f3814d089274ebb0f1f37af2c47a">End</link>());
654 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_directory_entry">DirectoryEntry</link>(<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a90d2ad375b46f9feb1c091305227cbe8">_base_iter</link>-&gt;first,&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator_1a90d2ad375b46f9feb1c091305227cbe8">_base_iter</link>-&gt;second);
655 }
656 
657 <emphasis role="keyword">using&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">DirectoryIterator</link>&#32;=&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">Detail::Directory::Iterator</link>;
658 
663 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_c_make_r_c_1_1_embedded_file_system">EmbeddedFileSystem</link>
664 {
665 <emphasis role="keyword">private</emphasis>:
669 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespace_c_make_r_c_1_1_detail_1af8b7b0ba529bcc74373e4ee395b54529">CMakeRC::Detail::IndexType</link>*&#32;<link linkend="_class_c_make_r_c_1_1_embedded_file_system_1a907c3ddde3effeb4b97f3c5b4d23988d">_index</link>;
675 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_file_or_directory">Detail::FileOrDirectory</link>*&#32;<link linkend="_class_c_make_r_c_1_1_embedded_file_system_1ab8e4e1221710c44add0f329b6a3cad47">_get</link>(std::string&#32;path)<emphasis role="keyword">&#32;const</emphasis>
676 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path&#32;=&#32;Detail::NormalizePath(path);
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;found&#32;=&#32;_index-&gt;find(path);
679 
680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(found&#32;==&#32;_index-&gt;end())
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;found-&gt;second;
687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
688 &#32;&#32;&#32;&#32;}
689 
690 <emphasis role="keyword">public</emphasis>:
696 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_embedded_file_system_1a9163d770a3ebcf479cd630690703cc05">EmbeddedFileSystem</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_namespace_c_make_r_c_1_1_detail_1af8b7b0ba529bcc74373e4ee395b54529">Detail::IndexType</link>&amp;&#32;index)
697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_index(&amp;index)
698 &#32;&#32;&#32;&#32;{}
699 
705 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_file">File</link>&#32;<link linkend="_class_c_make_r_c_1_1_embedded_file_system_1ae49cd6b12ff520cc722953dafc90bfe7">open</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path)<emphasis role="keyword">&#32;const</emphasis>
706 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;entry_ptr&#32;=&#32;_get(path);
708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!entry_ptr&#32;||&#32;!entry_ptr-&gt;IsFile())
709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
710 <emphasis role="preprocessor">#ifdef&#32;CMRC_NO_EXCEPTIONS</emphasis>
711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Error&#32;no&#32;such&#32;file&#32;or&#32;directory:&#32;%s\n&quot;</emphasis>,&#32;path.c_str());
712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abort();
713 <emphasis role="preprocessor">#else</emphasis>
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::system_error(make_error_code(std::errc::no_such_file_or_directory),&#32;path);
715 <emphasis role="preprocessor">#endif</emphasis>
716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;dat&#32;=&#32;entry_ptr-&gt;AsFile();
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_file">File</link>{dat.begin_ptr,&#32;dat.end_ptr};
719 &#32;&#32;&#32;&#32;}
720 
728 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_embedded_file_system_1acf69f5466bd4c59e48451a235ac7ab47">IsFile</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
729 &#32;&#32;&#32;&#32;{
730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;entry_ptr&#32;=&#32;_get(path);
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;entry_ptr&#32;&amp;&amp;&#32;entry_ptr-&gt;IsFile();
732 &#32;&#32;&#32;&#32;}
733 
741 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_embedded_file_system_1aacaaa6554852380e3c4e9529440482c5">IsDirectory</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
742 &#32;&#32;&#32;&#32;{
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;entry_ptr&#32;=&#32;_get(path);
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;entry_ptr&#32;&amp;&amp;&#32;entry_ptr-&gt;IsDirectory();
745 &#32;&#32;&#32;&#32;}
746 
754 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_c_make_r_c_1_1_embedded_file_system_1acf6a8b5508470806f06e45b0394b794c">Exists</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
755 &#32;&#32;&#32;&#32;{
756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!!_get(path);
757 &#32;&#32;&#32;&#32;}
758 
765 &#32;&#32;&#32;&#32;<link linkend="_class_c_make_r_c_1_1_detail_1_1_directory_1_1_iterator">DirectoryIterator</link>&#32;<link linkend="_class_c_make_r_c_1_1_embedded_file_system_1aa295b7f7c1aef39c3ef86bc472d19a99">IterateDirectory</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;path)<emphasis role="keyword">&#32;const</emphasis>
766 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;entry_ptr&#32;=&#32;_get(path);
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!entry_ptr)
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
770 <emphasis role="preprocessor">#ifdef&#32;CMRC_NO_EXCEPTIONS</emphasis>
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Error&#32;no&#32;such&#32;file&#32;or&#32;directory:&#32;%s\n&quot;</emphasis>,&#32;path.c_str());
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abort();
773 <emphasis role="preprocessor">#else</emphasis>
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::system_error(make_error_code(std::errc::no_such_file_or_directory),&#32;path);
775 <emphasis role="preprocessor">#endif</emphasis>
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!entry_ptr-&gt;IsDirectory())
778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
779 <emphasis role="preprocessor">#ifdef&#32;CMRC_NO_EXCEPTIONS</emphasis>
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;Error&#32;not&#32;a&#32;directory:&#32;%s\n&quot;</emphasis>,&#32;path.c_str());
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abort();
782 <emphasis role="preprocessor">#else</emphasis>
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;std::system_error(make_error_code(std::errc::not_a_directory),&#32;path);
784 <emphasis role="preprocessor">#endif</emphasis>
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;entry_ptr-&gt;AsDirectory().Begin();
787 &#32;&#32;&#32;&#32;}
788 };
789 
790 }&#32;<emphasis role="comment">//&#32;namespace&#32;CMakeRC</emphasis>
791 
792 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;CMRC_CMRC_HPP_INCLUDED</emphasis>
</programlisting></section>
