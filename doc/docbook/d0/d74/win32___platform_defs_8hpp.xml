<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_win32___platform_defs_8hpp" xml:lang="en-US">
<title>include/CxxWin/modules/Win32_core/system/win32_PlatformDefs.hpp File Reference</title>
<indexterm><primary>include/CxxWin/modules/Win32_core/system/win32_PlatformDefs.hpp</primary></indexterm>
<para>

<para>Contains preprocessor definitions to declare classes and structs as &apos;non-copyable&apos;, &apos;non-moveable&apos;, and to add a leak detector for debugging. </para>
 
</para>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_win32___platform_defs_8hpp_1a09f9dc37c074670133452cb5d04c2056">_WIN32_PLATFORMDEFS_HPP_</link></para>

<para>Contains preprocessor definitions to declare classes and structs as &apos;non-copyable&apos;, &apos;non-moveable&apos;, and to add a leak detector for debugging. </para>
</listitem>
            <listitem><para>#define <link linkend="_win32___platform_defs_8hpp_1a964d381579febb0cc83dcc69890beec0">__DECLARE_NON_COPYABLE</link>(className)</para>

<para>This is a shorthand macro for deleting a class&apos;s copy constructor and copy assignment operator. </para>
</listitem>
            <listitem><para>#define <link linkend="_win32___platform_defs_8hpp_1adc9b0f127fefc464e5b4e704259c8ced">__DECLARE_NON_MOVEABLE</link>(className)</para>

<para>This is a shorthand macro for deleting a class&apos;s move constructor and move assignment operator. </para>
</listitem>
            <listitem><para>#define <link linkend="_win32___platform_defs_8hpp_1a25195203b724562392caff0a9a74ba84">__DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</link>(className)</para>

<para>This is a shorthand way of writing both a __DECLARE_NON_COPYABLE and __LEAK_DETECTOR macro for a class. </para>
</listitem>
            <listitem><para>#define <link linkend="_win32___platform_defs_8hpp_1aa48cf96123b508654d4c4e9a56e831cb">__PREVENT_HEAP_ALLOCATION</link></para>

<para>This macro can be added to class definitions to disable the use of new/delete to allocate the object on the heap, forcing it to only be used as a stack or member variable. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Contains preprocessor definitions to declare classes and structs as &apos;non-copyable&apos;, &apos;non-moveable&apos;, and to add a leak detector for debugging. </para>

<para><formalpara><title>Author</title>

<para>StoneyDSP (<link xlink:href="mailto:nathanjhood@googlemail.com">nathanjhood@googlemail.com</link>)</para>
</formalpara>
</para>

<para><formalpara><title>Version</title>

<para>1.0.0 </para>
</formalpara>
<formalpara><title>Date</title>

<para>2023-08-30</para>
</formalpara>
<formalpara><title>Copyright</title>

<para>Copyright (c) 2023 </para>
</formalpara>
</para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_win32___platform_defs_8hpp_1a964d381579febb0cc83dcc69890beec0"/><section>
    <title>__DECLARE_NON_COPYABLE</title>
<indexterm><primary>__DECLARE_NON_COPYABLE</primary><secondary>win32_PlatformDefs.hpp</secondary></indexterm>
<indexterm><primary>win32_PlatformDefs.hpp</primary><secondary>__DECLARE_NON_COPYABLE</secondary></indexterm>
<para><computeroutput>#define __DECLARE_NON_COPYABLE( className)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;className&#32;(CONST&#32;className&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;\
&#32;&#32;&#32;&#32;className&amp;&#32;operator=&#32;(CONST&#32;className&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
</programlisting><para>

<para>This is a shorthand macro for deleting a class&apos;s copy constructor and copy assignment operator. </para>
</para>

<para>For example, instead of <literallayout><computeroutput><emphasis role="keyword">class&#32;</emphasis>MyClass
{
&#32;&#32;&#32;&#32;etc..

<emphasis role="keyword">private</emphasis>:
&#32;&#32;&#32;&#32;MyClass&#32;(<emphasis role="keyword">const</emphasis>&#32;MyClass&amp;);
&#32;&#32;&#32;&#32;MyClass&amp;&#32;operator=&#32;(<emphasis role="keyword">const</emphasis>&#32;MyClass&amp;);
};
</computeroutput></literallayout></para>

<para>..you can just write:</para>

<para><literallayout><computeroutput><emphasis role="keyword">class&#32;</emphasis>MyClass
{
&#32;&#32;&#32;&#32;etc..

<emphasis role="keyword">private</emphasis>:
&#32;&#32;&#32;&#32;<link linkend="_win32___platform_defs_8hpp_1a964d381579febb0cc83dcc69890beec0">__DECLARE_NON_COPYABLE</link>&#32;(MyClass)
};
</computeroutput></literallayout> </para>
</section>
<anchor xml:id="_win32___platform_defs_8hpp_1a25195203b724562392caff0a9a74ba84"/><section>
    <title>__DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</title>
<indexterm><primary>__DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</primary><secondary>win32_PlatformDefs.hpp</secondary></indexterm>
<indexterm><primary>win32_PlatformDefs.hpp</primary><secondary>__DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</secondary></indexterm>
<para><computeroutput>#define __DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR( className)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;<link linkend="_win32___platform_defs_8hpp_1a964d381579febb0cc83dcc69890beec0">__DECLARE_NON_COPYABLE</link>(className)&#32;\
&#32;&#32;&#32;&#32;__LEAK_DETECTOR(className)
</programlisting><para>

<para>This is a shorthand way of writing both a __DECLARE_NON_COPYABLE and __LEAK_DETECTOR macro for a class. </para>
</para>
</section>
<anchor xml:id="_win32___platform_defs_8hpp_1adc9b0f127fefc464e5b4e704259c8ced"/><section>
    <title>__DECLARE_NON_MOVEABLE</title>
<indexterm><primary>__DECLARE_NON_MOVEABLE</primary><secondary>win32_PlatformDefs.hpp</secondary></indexterm>
<indexterm><primary>win32_PlatformDefs.hpp</primary><secondary>__DECLARE_NON_MOVEABLE</secondary></indexterm>
<para><computeroutput>#define __DECLARE_NON_MOVEABLE( className)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;&#32;className&#32;(className&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;\
&#32;&#32;&#32;&#32;className&amp;&#32;operator=&#32;(className&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
</programlisting><para>

<para>This is a shorthand macro for deleting a class&apos;s move constructor and move assignment operator. </para>
</para>
</section>
<anchor xml:id="_win32___platform_defs_8hpp_1aa48cf96123b508654d4c4e9a56e831cb"/><section>
    <title>__PREVENT_HEAP_ALLOCATION</title>
<indexterm><primary>__PREVENT_HEAP_ALLOCATION</primary><secondary>win32_PlatformDefs.hpp</secondary></indexterm>
<indexterm><primary>win32_PlatformDefs.hpp</primary><secondary>__PREVENT_HEAP_ALLOCATION</secondary></indexterm>
<para><computeroutput>#define __PREVENT_HEAP_ALLOCATION</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:&#32;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;(size_t)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;&#32;\
&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>&#32;(<emphasis role="keywordtype">void</emphasis>*)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
</programlisting><para>

<para>This macro can be added to class definitions to disable the use of new/delete to allocate the object on the heap, forcing it to only be used as a stack or member variable. </para>
</para>
</section>
<anchor xml:id="_win32___platform_defs_8hpp_1a09f9dc37c074670133452cb5d04c2056"/><section>
    <title>_WIN32_PLATFORMDEFS_HPP_</title>
<indexterm><primary>_WIN32_PLATFORMDEFS_HPP_</primary><secondary>win32_PlatformDefs.hpp</secondary></indexterm>
<indexterm><primary>win32_PlatformDefs.hpp</primary><secondary>_WIN32_PLATFORMDEFS_HPP_</secondary></indexterm>
<para><computeroutput>#define _WIN32_PLATFORMDEFS_HPP_</computeroutput></para><para>

<para>Contains preprocessor definitions to declare classes and structs as &apos;non-copyable&apos;, &apos;non-moveable&apos;, and to add a leak detector for debugging. </para>
</para>
</section>
</section>
</section>
