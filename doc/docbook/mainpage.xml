<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_mainpage" xml:lang="en-US">
<title>CxxWin</title>
<indexterm><primary>CxxWin</primary></indexterm>

<para><anchor xml:id="_index_1md__r_e_a_d_m_e"/>     </para>
<section xml:id="_index_1autotoc_md1">
<title>Win32 API with C++ and Direct2D.</title>

<para>A quick one-and-done <link linkend="_namespace_win32">Win32</link> API project implementing a simple COM application window for Windows platforms in C++.</para>

<para></para>

<para>This simple application draws three semi-transparent circles within a main window, given a shared set of co-ordinates for their (relative) position and size. The main window itself is fully resizeable; the rendered circles will automatically re-calculate their own properties in relation to the resizing of the main window, while maintaining the shared position and size co-ordinates. In cases where two circles overlap, their alpha channels shall blend (the background fill is also factored into this), causing a pleasing overlapping effect.</para>

<para></para>

<para>While none of the above makes for a particularly interesting nor useful application on it&apos;s own, the codebase is written in C++ using the <link linkend="_namespace_win32">Win32</link> API, using Direct2D and Microsoft&apos;s COM (Component Object Model) class inheritance model, of which C++ is a first class language. The resulting application makes use of the most recent advances in C++ language standards and compiler features, is buildable on and for systems pre-dating Windows 7, and uses a logical, modular, object-based approach for portability, reusability, and maintainability.</para>

<para>See <link xlink:href="https://learn.microsoft.com/en-us/windows/win32/learnwin32/introduction-to-windows-programming-in-c--">the MSDN documentation for more</link>.</para>
</section>
<section xml:id="_index_1autotoc_md2">
<title>Modernized, modularized, hardened...</title>

<para>The examples given in the MSDN documentation have here been both modernized, and hardened; the codebase aims to make use of C++20&apos;s &apos;modules&apos; fucntionality for re-usability and to further highlight the Object-Oriented Programming approach that is the core of COM, the <link linkend="_namespace_win32">Win32</link> API, and of course C++ itself. The resulting windowed GUI application has been developed, built, and tested using a wide variety of modern C++ compiler toolchains, including popular Unix-like subsystems supporting GNU, Clang, and cross-compiling scenarios.</para>

<para>The codebase automatically calls on the correct charset (think &quot;ANSI&quot; or &quot;Unicode&quot;) for the build environment, pulls in the required header sets, and links itself to the required system libraries, thanks to modern compiler feature detection macros.</para>

<para>Additionally, a &apos;high DPI aware manifest&apos; is embedded into the application definition file, along with further compiler-level specifications to embed the application with some backwards compatibility for pre- Windows 7 environments. Modern compiler and language features automatically link the codebase with it&apos;s required system libraries and headers based on system platform, architecture, and other environmental features. Many portability and reusability features are coded in, meaning a lower dependency on buildsystems and less complex &quot;configure/compile/build/link&quot; runs. Some common build scripts are included to demonstrate this</para>
</section>
<section xml:id="_index_1autotoc_md3">
<title>How it works</title>

<para>In principle, the codebase is structured such that the Win32-based code is layered into subsets of modules, primarily containing headers that define classes and helper functions that your project should inherit (using OOP and COM - see the docs linked above) in a local project-level set of files.</para>

<para>For this purposes of this demo project, the &quot;local project&quot; files are located at the root of the &apos;/include/(projectName)/&apos; directory, and are as follows:</para>

<para><itemizedlist>
<listitem>
<para><link linkend="__main_component_8hpp">MainComponent.hpp</link>, <link linkend="__main_component_8cpp">MainComponent.cpp</link></para>

<para>These two files declare and define (respectively) your project&apos;s &apos;main window&apos; and it&apos;s functionality, it&apos;s contents, and it&apos;s behaviour. The class is named &apos;<link linkend="_class_main_component">MainComponent</link>&apos;, and inherits from both the &apos;<link linkend="_class_main_window">MainWindow</link>&apos; and, in turn, the &apos;<link linkend="_class_base_window">BaseWindow</link>&apos; classes. The &apos;<link linkend="_class_d_p_i_scale">DPIScale</link>&apos; class is also utilized here; a pair of static members of &apos;<link linkend="_class_d_p_i_scale">DPIScale</link>&apos; are initialized and utilized as co-ordinates for our &apos;main window&apos;. A &apos;<link linkend="_class_smart_pointer">SmartPointer</link>&apos; class (plus some helpers) is also used to handle the critical safe allocation and de-allocation of our handles on system-level memory resources, such as keyboard and mouse input.</para>

<para>This part of the codebase will typically be compiled into a binary library file, such as a &apos;.dll&apos;. Other binaries can then link to it, providing access to it&apos;s contents to the linkee.</para>
</listitem><listitem>
<para><link linkend="__win_main_8hpp">WinMain.hpp</link>, <link linkend="__win_main_8cpp">WinMain.cpp</link></para>

<para>These two files declare and define (respectively) your project&apos;s &apos;runtime entry point&apos; - this code is essentially the interface for the resulting &apos;*.exe&apos; file itself and what happens when you launch that file. As you might expect, it <emphasis>includes</emphasis> the &apos;<link linkend="_class_main_component">MainComponent</link>&apos; files (the code for the main window) using the usual preprocessor include directive. However, all of the main window&apos;s behaviour shall remain in it&apos;s own files. The primary task of the &apos;WinMain&apos; function is to handle &quot;messages&quot; in response to a well-defined set of user inputs, run a quick sanity check on the message, and either pass it to our &apos;<link linkend="_class_main_component">MainComponent</link>&apos; for further processing (see the &apos;HandleMessage()&apos; and &apos;WindowProc()&apos; Window object functions), or safely resume it&apos;s current state. It is <emphasis>critical</emphasis> that all memory resources are free when this function ends (such as when the program is closed), which requires the use of &apos;<link linkend="_class_smart_pointer">SmartPointer</link>&apos; - type classes and functionality (such as &apos;std::unique_ptr&apos; and friends provide for raw data types).</para>

<para>This part of the codebase will typically, but not always, be compiled into a binary executable file, such as a &apos;.exe&apos;. Remember that it <emphasis>includes</emphasis> the &apos;<link linkend="__main_component_8hpp">MainComponent.hpp</link>&apos; file using a single-line preprocessor directive, which makes <emphasis>every symbol declaration and inlined function</emphasis> in &apos;<link linkend="__main_component_8hpp">MainComponent.hpp</link>&apos; - <emphasis>and</emphasis> in it&apos;s own &quot;include&quot;s of other files - accessible to &apos;<link linkend="__win_main_8hpp_1aae5f25e9b47a8343df2bc65a87501f84">WinMain()</link>&apos;. In this scenario, any compiled library binaries associated with included header(s) will need to be linked with at the end of the building process, making the actual <emphasis>definitions</emphasis> of those included declarations also accessible (any definition that gets used by our application <emphasis>needs</emphasis> to be defined, somewhere, in order to be compiled into a translation unit for the linker to eventually link with).</para>
</listitem></itemizedlist>
</para>

<para>Any further additional functionality added to the project should likewise be declared and defined in it&apos;s own set of files, and included similarly - usually, you will probably just leave this pair of &apos;WinMain&apos; files alone for the most part, and new files containing new functionality will probably find themeselves included elsewhere in your program, eventually reaching the &apos;WinMain&apos; files via the already-defined inclusion of &apos;<link linkend="_class_main_component">MainComponent</link>&apos;.</para>

<para>Inside of the &apos;/include/CxxWin&apos; directory is another sub-directory named &apos;/modules&apos;, which in this instance models itself on a very small subset of the <link xlink:href="https://github.com/juce-framework/JUCE.git">JUCE Framework</link>&apos;s take on C++20 module support. There is just enough code here to support the MSDN docs <link linkend="_namespace_win32">Win32</link> API examples, and hopefully to point forward an interesting way to continue to integrate more functionality and features from the <link xlink:href="https://github.com/microsoft/Windows-classic-samples.git">many other examples to be found in the wild</link>, using the most modern C++ functionality.</para>

<para>BONUS: check &apos;/.vscode/tasks.json&apos; for instructions on how to build on Windows with each of the <link xlink:href="https://www.msys2.org/docs/environments/">Msys64 subsystems</link>. Note that to build using the &quot;MSYS2&quot; sub-system from within VSCode, you must launch VSCode from the Msys64 MSYS2 environment command line. All of the others should build natively. All resulting &apos;.exe&apos; binaries run natively on Windows.</para>

<para>BONUS 2: Additional support for CMake builds, making the configure/build process as easy as two console commands. If attempting to build <link linkend="_namespace_win32">Win32</link> API apps with CMake using Msys64/MinGW toolchains, check <link xlink:href="https://github.com/StoneyDSP/msys2-toolchain.git">my MSYS2 toolchain helper</link> project.</para>
</section>
<section xml:id="_index_1autotoc_md4">
<title>Thanks for reading!</title>
<section xml:id="_index_1autotoc_md5">
<title>References:</title>

<para><itemizedlist>
<listitem>
<para><link xlink:href="https://learn.microsoft.com/en-us/windows/win32/learnwin32/introduction-to-windows-programming-in-c--">MSDN documentation: Win32 API in C</link></para>
</listitem><listitem>
<para><link xlink:href="https://github.com/microsoft/Windows-classic-samples.git">Classic Windows programming samples</link></para>
</listitem><listitem>
<para><link xlink:href="https://github.com/juce-framework/JUCE.git">JUCE Framework</link></para>
</listitem><listitem>
<para><link xlink:href="https://www.msys2.org/docs/environments/">Msys64 subsystems</link> </para>
</listitem></itemizedlist>
</para>
</section>
</section>
</chapter>
